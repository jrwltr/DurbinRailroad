;=============================================================================
#define DO_TURNTABLE
#define DO_LOCONET
#define DO_DISPLAY
#define DO_OPERATE_PROGRAM
#define DO_ONBOARD_SWITCHES
#define DO_EEPROM
#define DO_LONG_EEPROM_FUNCTIONS

;=============================================================================

CLEAR       ; zero all variables

INCLUDE "ProcessorConfiguration.pbp"

goto init   ; skip over interrupt service routine, functions, other included code

INCLUDE "Interrupt.pbp"

;=============================================================================
operate_mode        var byte
    MODE_OPERATE    con 0
    MODE_PROGRAM    con 1
    MODE_MOVING     con 2

loconet_switch      var word

display_update_needed   var bit

button3_state       var byte
    BUTTON3_SET_SWITCH      con 0
    BUTTON3_SET_0           con 1
    BUTTON3_CAL_180         con 2
    BUTTON3_SET_180_SWITCH  con 3
    BUTTON3_ERASE_EEPROM    con 4

button3_repeated   var bit[0]

;=============================================================================

INCLUDE "LCD4X20.pbp"
INCLUDE "EEPROM.pbp"
INCLUDE "OnboardSwitches.pbp"
INCLUDE "LOCONET.inc"
INCLUDE "LOCONET.pbp"
INCLUDE "LongMath.pbp"
INCLUDE "TurnTableEEPROM.pbp"
INCLUDE "TurnTable.pbp"

;=============================================================================
; display_long: write a long value to the display
;   intput: long_minuend - the value to be displayed
;
display_long:
    if (long_minuend[0] = $ffff) and (long_minuend[1] = $ffff) then
        ; no translation found
        ARRAYWRITE DisplayString, ["??? ", 0]
    else
        long_subtrahend[0] = TT_ZERO_OFFSET_LO
        long_subtrahend[1] = TT_ZERO_OFFSET_HI
        gosub long_subtract
        ARRAYWRITE DisplayString, [hex long_result[1], hex4 long_result[0], " ", 0]
    endif
    goto display_write_string

;=============================================================================
update_display:
    DisplayRow = 0
    DisplayCol = 0
    gosub display_set_cursor
    if loconet_switch != $ffff then
        ARRAYWRITE DisplayString, [dec loconet_switch+1, " ", 0]
    else
        ARRAYWRITE DisplayString, ["??? ", 0]
    endif
    gosub display_write_string

    long_minuend[0] = desired_tt_loc[0]
    long_minuend[1] = desired_tt_loc[1]
    gosub display_long

    long_minuend[0] = current_tt_loc[0]
    long_minuend[1] = current_tt_loc[1]
    gosub display_long

    gosub display_clear_to_end_of_line

    gosub display_operate_program

    DisplayRow = 1
    DisplayCol = 0
    gosub display_set_cursor
    if operate_mode = MODE_OPERATE then
        ARRAYWRITE DisplayString, ["UP  DWN  GO", 0]
        if (tt_180[0] != $ffff) or (tt_180[1] != $ffff) then
            gosub display_write_string
            ARRAYWRITE DisplayString, ["  180", 0]
        endif
    elseif operate_mode = MODE_PROGRAM then
        ARRAYWRITE DisplayString, ["CW CCW ", 0]
        gosub display_write_string
        if (button3_state = BUTTON3_SET_SWITCH) then
            ARRAYWRITE DisplayString, [" SET  ", 0]
        elseif (button3_state = BUTTON3_SET_0) then
            ARRAYWRITE DisplayString, [" ZERO ", 0]
        elseif (button3_state = BUTTON3_CAL_180) then
            ARRAYWRITE DisplayString, [" C180 ", 0]
        elseif (button3_state = BUTTON3_SET_180_SWITCH) then
            ARRAYWRITE DisplayString, ["180SW ", 0]
        elseif (button3_state = BUTTON3_ERASE_EEPROM) then
            ARRAYWRITE DisplayString, ["ERASE ", 0]
        endif

        gosub display_write_string
        ARRAYWRITE DisplayString, ["FNC", 0]
    elseif operate_mode = MODE_MOVING then
        ARRAYWRITE DisplayString, ["Moving", 0]
    endif
    gosub display_write_string
    goto display_clear_to_end_of_line

;=============================================================================
operate_program_flash:
    DisplayRow = 0
    DisplayCol = DISPLAY_COLUMNS-1
    gosub display_set_cursor
    ARRAYWRITE DisplayString, [" ", 0]
    goto display_write_string
    pause 400
display_operate_program:
    DisplayCol = DISPLAY_COLUMNS-1
    gosub display_set_cursor
    if operate_mode = MODE_OPERATE then
        ARRAYWRITE DisplayString, ["O", 0]
    elseif operate_mode = MODE_PROGRAM then
        ARRAYWRITE DisplayString, ["P", 0]
    endif
    goto display_write_string

;=============================================================================
operate_switch_on:
    if operate_mode != MODE_OPERATE then 
        operate_mode = MODE_OPERATE
    endif
    return

operate_switch_off:
    if operate_mode != MODE_PROGRAM then 
        operate_mode = MODE_PROGRAM
    endif
    return


;=============================================================================
button_1_pressed:
    if operate_mode = MODE_OPERATE then
operate_up_key:
        gosub turntable_previous_location
    elseif operate_mode = MODE_PROGRAM then
        gosub turntable_clockwise
    elseif operate_mode = MODE_MOVING then
        goto turntable_stop
    endif
    return

button_2_pressed:
    if operate_mode = MODE_OPERATE then
operate_down_key:
        gosub turntable_next_location
    elseif operate_mode = MODE_PROGRAM then
        gosub turntable_counterclockwise
    elseif operate_mode = MODE_MOVING then
        goto turntable_stop
    endif
    return

button_3_pressed:
    button3_repeated = 0
    if operate_mode = MODE_OPERATE then
        position_to_goto[0] = desired_tt_loc[0]
        position_to_goto[1] = desired_tt_loc[1]
        goto turntable_goto_position
    elseif operate_mode = MODE_MOVING then
        goto turntable_stop
    else
        return
    endif

button_4_pressed:
    if operate_mode = MODE_OPERATE then
        position_to_goto[0] = TT_180_SW_MARKER_LO
        position_to_goto[1] = TT_180_SW_MARKER_HI
        gosub turntable_goto_position
    elseif operate_mode = MODE_PROGRAM then
        button3_state = button3_state + 1
        if (button3_state > BUTTON3_ERASE_EEPROM) then
            button3_state = BUTTON3_SET_SWITCH
        endif
    elseif operate_mode = MODE_MOVING then
        goto turntable_stop
    endif
    return

;=============================================================================
button_1_repeat:
    if operate_mode = MODE_OPERATE then
        goto operate_up_key
    endif
    goto button_cancel_repeat

button_2_repeat:
    if operate_mode = MODE_OPERATE then
        goto operate_down_key
    endif
    goto button_cancel_repeat

button_3_repeat:
    if operate_mode = MODE_PROGRAM then
        button3_repeated = 1
    endif
button_4_repeat:
    goto button_cancel_repeat

;=============================================================================
button_1_released:
button_2_released:
    if operate_mode = MODE_MOVING then
        goto turntable_stop
    endif
button_4_released:
    return

button_3_released:
    if operate_mode = MODE_PROGRAM then
        if (button3_state = BUTTON3_SET_SWITCH) then
            if button3_repeated then
                goto turntable_ee_delete_stop
            else
                goto turntable_ee_set_translation
            endif
        elseif (button3_state = BUTTON3_SET_0) then
            goto turntable_set_zero
        elseif (button3_state = BUTTON3_CAL_180) then
            if button3_repeated then
                tt_180[0] = $ffff
                tt_180[1] = $ffff
                gosub turntable_ee_save_180
                gosub turntable_compute_max_loc
                button3_repeated = 0
            else
                goto turntable_set_180
            endif
        elseif (button3_state = BUTTON3_SET_180_SWITCH) then
            goto turntable_set_switch_180
        elseif (button3_state = BUTTON3_ERASE_EEPROM) then
            if button3_repeated then
                gosub turntable_erase_eeprom
                gosub turntable_initialize
            endif
        endif
    endif
    return

;=============================================================================
init:
gosub display_initialize
#ifdef DO_LED
gosub led_initialize
#endif
gosub loconet_initialize 
gosub turntable_initialize

;=============================================================================

INCLUDE "Mainloop.pbp"

;=============================================================================

    End

