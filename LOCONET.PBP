;=============================================================================
RX_PACKET_LEN   con 2
    ; RX_PACKET_LEN is the number of bytes that will be saved from 
    ; each LOCONET packet.  It does not include the packet opcode or checksum.
    ; It's only big enough to contain the largest packet parsed by this code.
    ; If you want to parse a longer packet, just change this value.


;=============================================================================
rx_byte             var byte                ; last byte taken from receive FIFO
rx_opcode           var byte                ; opcode from the last received packet 
rx_checksum         var byte                ; checksum accumulation when receiving a packet
rx_packet           var byte[RX_PACKET_LEN] ; a buffer to contain the packet contents
rx_packet_index     var byte                ; index into rx_packet buffer
rx_packet_length    var byte                ; number of bytes left in the packet being received

rx_state var byte                           ; current state of the receive state machine

;=============================================================================
switch_motor_direction  var byte
    SWITCH_MOTOR_THROWN con $00
    SWITCH_MOTOR_CLOSED con $20 ;this corresponds to the bit in the OPC_SW_REQ command
    SWITCH_MOTOR_TOGGLE con $80

;=============================================================================
; loconet_receive: receive state machine for Loconet packets, called after 
;   the interrupt routine detects received data
;
loconet_receive:
    while rx_head != rx_tail 
        rx_byte = rx_data_fifo[rx_head]
#ifdef SHOW_RX_DATA
        SRD_Row var byte
        SRD_Col var byte
        if (DisplayRow != 3) or (DisplayCol >= DISPLAY_COLUMNS-3) then
            DisplayRow = 3
            DisplayCol = 0
            gosub display_set_cursor
        endif
        ARRAYWRITE DisplayString, [hex rx_byte, " ", 0]
        gosub display_write_string
#endif
        if rx_byte.7 then
            ; found an opcode
            rx_opcode = rx_byte
            rx_checksum = rx_byte
            if rx_byte.6 then
                if rx_byte.5 then
                    ; next recieved byte is packet length
                    rx_state = RX_STATE_WAITING_FOR_LENGTH
                else
                    rx_packet_length = 5
                    rx_state = RX_STATE_ACCUMULATING_DATA
                endif
            else
                if rx_byte.5 then
                    rx_packet_length = 3
                else
                    rx_packet_length = 1
                endif
                rx_state = RX_STATE_ACCUMULATING_DATA
            endif
            rx_packet_index = 0
        else
            rx_checksum = rx_checksum ^ rx_byte
            if rx_state = RX_STATE_ACCUMULATING_DATA then
                rx_packet_length = rx_packet_length - 1
                if rx_packet_length = 0 then
                    rx_state = RX_STATE_WAITING_FOR_OPCODE
                    if rx_checksum = $ff then
                        ; valid packet received
#ifdef DO_DEVELOPEMENT_BOARD
                        led_to_change = LED_LOCONET_PKT
                        gosub led_flash
#endif
                        if (rx_opcode = OPC_SW_REQ) and (rx_packet[1] & $10) then 
                            ; key was pressed on CAB
#ifdef DO_DISPLAY
                            display_update_needed = 1
#endif
                            loconet_switch = ((rx_packet[1] & $f) << 7) + rx_packet[0]
                            switch_motor_direction = rx_packet[1] & SWITCH_MOTOR_CLOSED
                            gosub handle_switch_request
                        endif
                    endif
                else
                    if rx_packet_index < RX_PACKET_LEN then
                        rx_packet[rx_packet_index] = rx_byte
                        rx_packet_index = rx_packet_index + 1
                    endif
                endif
            elseif rx_state = RX_STATE_WAITING_FOR_LENGTH then
                rx_packet_length = rx_byte
                rx_state = RX_STATE_ACCUMULATING_DATA
            endif
        endif
        rx_head = rx_head + 1
        if rx_head = RXFIFO_SIZE then rx_head = 0
    wend
    return

;=============================================================================
loconet_initialize:
    rx_state = RX_STATE_WAITING_FOR_OPCODE
    loconet_switch = $ffff
    return

;=============================================================================

