;=============================================================================
desired_tt_loc          var word[2] ; the turntable position corresponding 
                                    ; to a preprogrammed turntable stop

position_to_goto        var word[2] ; set before calling turntable_goto_position

last_switch_request     var word    ; the last switch request received on the Loconet,
                                    ; or the switch corresponding to a preprogrammed
                                    ; turntable stop

save_operate_mode       var byte    ; a place to save the current operate_mode, while
                                    ; the turntable is moving

tt_max_loc              var word[2] ; upper limit of turntable movement

;=============================================================================

MAX_DAC_VALUE   con 31
MIN_DAC_VALUE   con 2
RampDownCounts  var word[MAX_DAC_VALUE]

;=============================================================================
; turntable_set_zero: mark the current location of the turntable as position 0
;
turntable_set_zero:
    current_tt_loc[0] = TT_ZERO_OFFSET_LO
    current_tt_loc[1] = TT_ZERO_OFFSET_HI
    goto turntable_ee_save_current_location

;=============================================================================
; turntable_set_180: mark the current location of the turntable as 180 degrees from 0
;
turntable_set_180:
    if (current_tt_loc[0] = 0) and (current_tt_loc[1] = 0) then return
    long_minuend[0] = current_tt_loc[0]
    long_minuend[1] = current_tt_loc[1]
    long_subtrahend[0] = TT_ZERO_OFFSET_LO
    long_subtrahend[1] = TT_ZERO_OFFSET_HI
    gosub long_subtract
    tt_180[0] = long_result[0]
    tt_180[1] = long_result[1]
    gosub turntable_ee_save_180
turntable_compute_max_loc:
    if (tt_180[0] = $ffff) and (tt_180[1] = $ffff) then
        ; $186A0 is maximum value is default value for a little more than 360 degrees
        long_addend1[0] = $86A0
        long_addend1[1] = $1
    else
        long_addend1[0] = tt_180[0]
        long_addend1[1] = tt_180[1]
        long_addend2[0] = tt_180[0]
        long_addend2[1] = tt_180[1]
        gosub long_add
        long_addend1[0] = long_result[0]
        long_addend1[1] = long_result[1]
    endif
    long_addend2[0] = TT_ZERO_OFFSET_LO
    long_addend2[1] = TT_ZERO_OFFSET_HI
    gosub long_add
    tt_max_loc[0] = long_result[0]
    tt_max_loc[1] = long_result[1]
    return

;=============================================================================
save_cur_loc    var word[2]
turntable_set_switch_180:
    if (loconet_switch = $ffff) then return
    save_cur_loc[0] = current_tt_loc[0]
    save_cur_loc[1] = current_tt_loc[1]
    current_tt_loc[0] = TT_180_SW_MARKER_LO
    current_tt_loc[1] = TT_180_SW_MARKER_HI
    gosub turntable_set_translation
    current_tt_loc[0] = save_cur_loc[0]
    current_tt_loc[1] = save_cur_loc[1]
    return

;=============================================================================
;turntable_goto_position: move the turntable to the requested position
;   input: position_to_goto
;
CounterStop     var word[2] ; number of counts before stopping timer

Clockwise       var bit     ; 1 if requested movement is clockwise,
                            ; 0 if requested movement is counter clockwise

turntable_goto_position:
    if (current_tt_loc[0] = $ffff) and (current_tt_loc[0] = $ffff) then return

    if (position_to_goto[0] = TT_180_SW_MARKER_LO) and (position_to_goto[1] = TT_180_SW_MARKER_HI) then
        if (tt_180[0] = $ffff) and (tt_180[1] = $ffff) then return
        long_minuend[0] = current_tt_loc[0]
        long_minuend[1] = current_tt_loc[1]
        long_subtrahend[0] = tt_180[0]
        long_subtrahend[1] = tt_180[1]
        gosub long_subtract
        position_to_goto[0] = long_result[0]
        position_to_goto[1] = long_result[1]
        if (long_result[1] & $8000) then
            ; current_tt_loc is less than 180 degrees, move clockwise
            long_addend1[0] = current_tt_loc[0]
            long_addend1[1] = current_tt_loc[1]
            long_addend2[0] = tt_180[0]
            long_addend2[1] = tt_180[1]
            gosub long_add
            position_to_goto[0] = long_result[0]
            position_to_goto[1] = long_result[1]
        endif
    endif

    long_minuend[0] = position_to_goto[0]
    long_minuend[1] = position_to_goto[1]
    long_subtrahend[0] = current_tt_loc[0]
    long_subtrahend[1] = current_tt_loc[1]
    gosub long_subtract

    if (long_result[0] = 0) and (long_result[1] = 0) then 
        ;position_to_goto = current_tt_loc, we're already there, no reason to move
        return
    elseif long_result[1] & $8000 then
        ;position_to_goto < current_tt_loc, new position is less than current position
        ;so need to move counter clockwise

        long_minuend[0] = current_tt_loc[0]
        long_minuend[1] = current_tt_loc[1]
        long_subtrahend[0] = position_to_goto[0]
        long_subtrahend[1] = position_to_goto[1]
        gosub long_subtract

        Clockwise = 0
    else
        ;position_to_goto > current_tt_loc, new position is greater than current positioon
        ;so need to move clockwise
        Clockwise = 1
    endif
    CounterStop[0] = long_result[0]
    CounterStop[1] = long_result[1]
    ;CounterStop now contains the number of counts between the current position and the new position

    save_operate_mode = operate_mode
    operate_mode = MODE_MOVING
    gosub update_display

    gosub StartTurntableCounter

    ; set the direction
    if Clockwise then
        TURNTABLE_XOR  = 1
        TT_DIR1 = 0
        TT_DIR2 = 1
    else
        TURNTABLE_XOR  = 0
        TT_DIR1 = 1
        TT_DIR2 = 0
    endif

    gosub StartHalfSecondTimer

    ; start the turntable at slowest speed
    TURNTABLE_DAC = MIN_DAC_VALUE

    if (CounterStop[1] != 0) || (CounterStop[0] > RampDownCounts[0] + RampDownCounts[1]) then 
        ; number of counts to move (CounterStop) is big enough that we will use the half second
        ; timer to ramp up and down the turntable speed
        return
    endif
    ; number of counts to move is small so we'll just wait for the counter to reach the
    ; desired vaue

; wait_until_done: watch the turntable counter until it reaches the CounterStop value
;    this will be done at the lowest turntable speed
wait_until_done:
    gosub StopHalfSecondTimer 
    long_minuend[0] = CounterStop[0]
    long_minuend[1] = CounterStop[1]
    do
        gosub ReadTurntableCounter 
        long_subtrahend[0] = TTCounter[0]
        long_subtrahend[1] = TTCounter[1]
        gosub long_subtract
    loop until ((long_result[0] = 0) and (long_result[1] = 0)) or (long_result[1] & $8000)

; turntable_stop: stop the turntable, this can happen under two circumstances
;   1.  After "wait_until_done" has see the turntable counter reach the desired position at the slowest speed.
;   2.  When positioning the turntable in program mode with the clockwise/counter clockwise keys.
;       When the key is released, turntable_stop is called.  The turntable may be moving at any speed.
;
turntable_stop:
    gosub StopHalfSecondTimer 

    operate_mode = save_operate_mode
    display_update_needed = 1

    if (TT_DIR1 = 0) and (TT_DIR2 = 0) then 
        ; if already stopped, return
        ; this never happens
        return
    endif

    TT_DIR1 = 0     ; stop the turntable
    TT_DIR2 = 0     ;
    TURNTABLE_DAC = 0

    ; if the turntable is moving at full speed, it will keep moving for up to 500 milliseconds
    ; after the control signals stop the turntable motor.  We have to wait here long enough for
    ; the movement to stop before reading the counter to determine the stop position.
    pause 600
    TURNTABLE_COUNTER_ENABLE = 0

    gosub ReadTurntableCounter 
    if Clockwise then
        ; clockwise, current_tt_loc = current_tt_loc + TTCounter
        long_addend1[0] = current_tt_loc[0]
        long_addend1[1] = current_tt_loc[1]
        long_addend2[0] = TTCounter[0]
        long_addend2[1] = TTCounter[1]
        gosub long_add
    else
        ; counter clockwise, current_tt_loc = current_tt_loc - TTCounter
        long_minuend[0] = current_tt_loc[0]
        long_minuend[1] = current_tt_loc[1]
        long_subtrahend[0] = TTCounter[0]
        long_subtrahend[1] = TTCounter[1]
        gosub long_subtract
    endif
    current_tt_loc[0] = long_result[0]
    current_tt_loc[1] = long_result[1]
    goto turntable_ee_save_current_location

;=============================================================================
HalfSecondTimerExpired:
    gosub ResetHalfSecondTimer

    gosub ReadTurntableCounter 
    long_minuend[0] = CounterStop[0]
    long_minuend[1] = CounterStop[1]
    long_subtrahend[0] = TTCounter[0]
    long_subtrahend[1] = TTCounter[1]
    gosub long_subtract
    long_minuend[0] = long_result[0]
    long_minuend[1] = long_result[1]
    ;long_minuend contains the number of counts left until we reach the desired position

    ExpectedCountsAtNextSpeed   var word
    if (TURNTABLE_DAC < MAX_DAC_VALUE) then
        ExpectedCountsAtNextSpeed = RampDownCounts[TURNTABLE_DAC  ] - RampDownCounts[TURNTABLE_DAC-1]
    else
        ExpectedCountsAtNextSpeed = RampDownCounts[MAX_DAC_VALUE-1] - RampDownCounts[MAX_DAC_VALUE-2]
    endif
    long_subtrahend[0] = RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed
    long_subtrahend[1] = 0
    gosub long_subtract

    ;(CounterStop - TTCounter) (in long_minuend) is the number of counts left before stopping
    ;(RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed)) is the number of counts it will
    ;take to stop if we speed up to the next DAC value or hold at max speed
    ;if ((CounterStop - TTCounter) < (RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed)) then
    if (long_result[1] & $8000) then
        ; need to slow down the turntable, slow down until the number of counts left to go (long_minuend) is 
        ; less than the number of counts required to slow down from the turntable speed
        do
            TURNTABLE_DAC = TURNTABLE_DAC - 1
        loop until (TURNTABLE_DAC = MIN_DAC_VALUE) or ((long_minuend[1] = 0) and (long_minuend[0] > RampDownCounts[TURNTABLE_DAC-1]))
    else
        ; it's OK to speed up the turntable (or keep moving at the max speed)
        if (TURNTABLE_DAC < MAX_DAC_VALUE) then
            TURNTABLE_DAC = TURNTABLE_DAC + 1
        endif
    endif
    if TURNTABLE_DAC = MIN_DAC_VALUE then
        ; once we've ramped down to the slowest speed, just wait until we get to the desired position
        gosub wait_until_done
    endif
    return

;=============================================================================
turntable_counterclockwise:
    ; in program mode, the counter clockwise key was pressed, goto position
    ; zero or until the key is released
    position_to_goto[0] = TT_ZERO_OFFSET_LO
    position_to_goto[1] = TT_ZERO_OFFSET_HI
    goto turntable_goto_position

;=============================================================================
turntable_clockwise:
    ; in program mode, the clockwise key was pressed, goto the maximum position
    ; or until the key is released
    position_to_goto[0] = tt_max_loc[0]
    position_to_goto[1] = tt_max_loc[1]
    goto turntable_goto_position

;=============================================================================
; turntable_next_location: look up the "next" preprogrammed stop in EEPROM
;   intput: tt_stop is the ordinal value of the current position
;   output: tt_stop is updated
;           desired_tt_loc - the turntable position corresonding to tt_stop
;
turntable_next_location:
    if (loconet_switch = $ffff) or (tt_stop = MAX_TT_STOPS - 1) then return
    tt_stop = tt_stop + 1
    gosub turntable_ee_read_stop
    if tt_ee_switch != $ffff then
        ; found a new location
        loconet_switch = tt_ee_switch
        last_switch_request = tt_ee_switch
        desired_tt_loc[0] = tt_ee_position[0]
        desired_tt_loc[1] = tt_ee_position[1]
    else
        ; already at end of list so don't change anything
        tt_stop = tt_stop - 1
    endif
    return

;=============================================================================
; turntable_previous_location: look up the "previous" preprogrammed stop in EEPROM
;   intput: tt_stop is the ordinal value of the current position
;   output: tt_stop is updated
;           desired_tt_loc - the turntable position corresonding to tt_stop
;
turntable_previous_location:
    if (loconet_switch = $ffff) or (tt_stop = 0) then return
    tt_stop = tt_stop - 1
    gosub turntable_ee_read_stop
    loconet_switch = tt_ee_switch
    last_switch_request = tt_ee_switch
    desired_tt_loc[0] = tt_ee_position[0]
    desired_tt_loc[1] = tt_ee_position[1]
    return

;=============================================================================
; handle_switch_request: a Loconet switch request packet was received
;   input: loconet_switch
;
handle_switch_request:
    ; see if this switch is stored a a preprogrammed stop in EEPROM
    gosub turntable_ee_look_up_loconet_switch
    if (tt_ee_switch = loconet_switch) then
        ; loconet_switch found in translate table
        desired_tt_loc[0] = tt_ee_position[0]
        desired_tt_loc[1] = tt_ee_position[1]
        last_switch_request = loconet_switch
        if operate_mode = MODE_OPERATE then
            position_to_goto[0] = desired_tt_loc[0]
            position_to_goto[1] = desired_tt_loc[1]
            goto turntable_goto_position
        endif
    else
        ; loconet_switch not found in translate table
        if operate_mode = MODE_OPERATE then 
            ; ignore the switch request
            loconet_switch = last_switch_request
        else
            desired_tt_loc[0] = $ffff
            desired_tt_loc[1] = $ffff
        endif
    endif
    return

;=============================================================================
; turntable_set_translation: save a preprogrammed stop in EEPROM
;   input:  currrent_tt_loc is the current turntable position
;           loconet_switch the loconet switch number that identifies the stop
;
turntable_set_translation:
    if (loconet_switch = $ffff) or ((current_tt_loc[0] = $ffff) and (current_tt_loc[1] = $ffff)) then return
    ; see if an existing preprogrammed stop exists corresponding to loconet_switch
    gosub turntable_ee_look_up_loconet_switch
    if (tt_stop = MAX_TT_STOPS) then
        ; EEPROM is full
        return
    endif
    desired_tt_loc[0] = current_tt_loc[0]
    desired_tt_loc[1] = current_tt_loc[1]
    tt_ee_switch = loconet_switch
    tt_ee_position[0] = current_tt_loc[0]
    tt_ee_position[1] = current_tt_loc[1]
    ; if an existing stop existed, this will update the stop with the
    ; current position.  if it didn't exist, this will add the new
    ; stop to the end of the list
    goto turntable_ee_write_stop

;=============================================================================
turntable_initialize:
    TT_DIR1 = 0
    TT_DIR2 = 0
    TURNTABLE_DAC = 0

    ; RampDownCounts contains the number of turntable counts it will take
    ; to stop the turntable from a given turntable speed.  The table is
    ; indexed by the DAC value minus 1 so RampDownCounts[0] is the number
    ; of counts it takes to stop the turntable at the slowest DAC setting.
    RampDownCounts[ 0] = 10 
    RampDownCounts[ 1] = 44 
    RampDownCounts[ 2] = 108 
    RampDownCounts[ 3] = 201 
    RampDownCounts[ 4] = 326 
    RampDownCounts[ 5] = 482 
    RampDownCounts[ 6] = 670 
    RampDownCounts[ 7] = 888 
    RampDownCounts[ 8] = 1137 
    RampDownCounts[ 9] = 1419 
    RampDownCounts[10] = 1730 
    RampDownCounts[11] = 2071 
    RampDownCounts[12] = 2444 
    RampDownCounts[13] = 2848 
    RampDownCounts[14] = 3285 
    RampDownCounts[15] = 3757 
    RampDownCounts[16] = 4259 
    RampDownCounts[17] = 4793 
    RampDownCounts[18] = 5362 
    RampDownCounts[19] = 5966 
    RampDownCounts[20] = 6601 
    RampDownCounts[21] = 7270 
    RampDownCounts[22] = 7974 
    RampDownCounts[23] = 8714 
    RampDownCounts[24] = 9486 
    RampDownCounts[25] = 10297 
    RampDownCounts[26] = 11143 
    RampDownCounts[27] = 12025 
    RampDownCounts[28] = 12948 
    RampDownCounts[29] = 13906 
    RampDownCounts[30] = 14906 

    last_switch_request = $ffff
    desired_tt_loc[0] = $ffff
    desired_tt_loc[1] = $ffff

#ifdef ERASE_EEPROM
    gosub turntable_erase_eeprom
#endif

    gosub turntable_ee_read_current_location
    gosub turntable_ee_read_180
    gosub turntable_compute_max_loc

    ; try to find the current location in the translation table
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch = $ffff) then 
            tt_stop = MAX_TT_STOPS
            exit
        endif
        if (tt_ee_position[0] = current_tt_loc[0]) and (tt_ee_position[1] = current_tt_loc[1]) then
            exit
        endif
    next tt_stop 
    if  (tt_stop = MAX_TT_STOPS) then
        ; current location not found in translate table
        ; use the first entry in the translate table if it exists
        tt_stop = 0
        gosub turntable_ee_read_stop
    endif
    if tt_ee_switch != $ffff then
        loconet_switch = tt_ee_switch 
        desired_tt_loc[0] = tt_ee_position[0]
        desired_tt_loc[1] = tt_ee_position[1]
    endif
    last_switch_request = loconet_switch
    return

;=============================================================================

