;=============================================================================
desired_tt_position     var word[2]
position_to_goto        var word[2]
last_switch_request     var word

save_operate_mode       var byte
save_desired_position   var word[2]

;=============================================================================

MAX_DAC_VALUE   con 31
RampDownCounts  var word[MAX_DAC_VALUE]

TT_ZERO_OFFSET_HI  con $0
TT_ZERO_OFFSET_LO  con $800

TT_MAX_POSITION_LO  con $86A0
TT_MAX_POSITION_HI  con $1

;=============================================================================
turntable_set_zero:
    current_tt_loc[0] = TT_ZERO_OFFSET_LO
    current_tt_loc[1] = TT_ZERO_OFFSET_HI
    goto turntable_ee_save_current_location

;=============================================================================
CounterStop     var word[2]  ; number of counts before stopping timer
Clockwise       var bit

turntable_goto_position:
    if (current_tt_loc[0] = $ffff) and (current_tt_loc[0] = $ffff) then return

    long_minuend[0] = position_to_goto[0]
    long_minuend[1] = position_to_goto[1]
    long_subtrahend[0] = current_tt_loc[0]
    long_subtrahend[1] = current_tt_loc[1]
    gosub long_subtract

    if (long_result[0] = 0) and (long_result[1] = 0) then 
        ;position_to_goto = current_tt_loc
        return
    elseif long_result[1] & $8000 then
        ;position_to_goto < current_tt_loc

        long_minuend[0] = current_tt_loc[0]
        long_minuend[1] = current_tt_loc[1]
        long_subtrahend[0] = position_to_goto[0]
        long_subtrahend[1] = position_to_goto[1]
        gosub long_subtract

        Clockwise = 0
    else
        ;position_to_goto > current_tt_loc
        Clockwise = 1
    endif
    CounterStop[0] = long_result[0]
    CounterStop[1] = long_result[1]

    save_operate_mode = operate_mode
    operate_mode = MODE_MOVING
    gosub update_display

    gosub StartTurntableCounter

    ; set the direction
    if Clockwise then
        TURNTABLE_XOR  = 1
        TURNTABLE_DIR1 = 1
        TURNTABLE_DIR2 = 0
    else
        TURNTABLE_XOR  = 0
        TURNTABLE_DIR1 = 0
        TURNTABLE_DIR2 = 1
    endif

    gosub StartHalfSecondTimer

    ; start the turntable
    TURNTABLE_DAC = 1

    if (CounterStop[1] != 0) || (CounterStop[0] > RampDownCounts[0] + RampDownCounts[1]) then return

wait_until_done:
    gosub StopHalfSecondTimer 
    long_minuend[0] = CounterStop[0]
    long_minuend[1] = CounterStop[1]
    do
        gosub ReadTurntableCounter 
        long_subtrahend[0] = TTCounter[0]
        long_subtrahend[1] = TTCounter[1]
        gosub long_subtract
    loop until ((long_result[0] = 0) and (long_result[1] = 0)) or (long_result[1] & $8000)
turntable_stop:
    gosub StopHalfSecondTimer 

    operate_mode = save_operate_mode
    display_update_needed = 1
    if TURNTABLE_DIR1 = 0 and TURNTABLE_DIR2 = 0 then return  ; if already stopped return
    TURNTABLE_DIR1 = 0     ; stop the turntable
    TURNTABLE_DIR2 = 0     ;
    TURNTABLE_DAC = 0

    pause 600       ; about 600 milliseconds before turntable stops moving at full speed
    TURNTABLE_COUNTER_ENABLE = 0

    gosub ReadTurntableCounter 
    if TURNTABLE_XOR = 1 then
        ; clockwise, current_tt_loc = current_tt_loc + TTCounter
        long_addend1[0] = current_tt_loc[0]
        long_addend1[1] = current_tt_loc[1]
        long_addend2[0] = TTCounter[0]
        long_addend2[1] = TTCounter[1]
        gosub long_add
    else
        ; counter clockwise, current_tt_loc = current_tt_loc - TTCounter
        long_minuend[0] = current_tt_loc[0]
        long_minuend[1] = current_tt_loc[1]
        long_subtrahend[0] = TTCounter[0]
        long_subtrahend[1] = TTCounter[1]
        gosub long_subtract
    endif
    current_tt_loc[0] = long_result[0]
    current_tt_loc[1] = long_result[1]
    goto turntable_ee_save_current_location

;=============================================================================
HalfSecondTimerExpired:
    gosub ResetHalfSecondTimer

    gosub ReadTurntableCounter 
    long_minuend[0] = CounterStop[0]
    long_minuend[1] = CounterStop[1]
    long_subtrahend[0] = TTCounter[0]
    long_subtrahend[1] = TTCounter[1]
    gosub long_subtract
    long_minuend[0] = long_result[0]
    long_minuend[1] = long_result[1]
    ;long_minuend contains the number of counts left until stop

    ExpectedCountsAtNextSpeed   var word
    if (TURNTABLE_DAC < MAX_DAC_VALUE) then
        ExpectedCountsAtNextSpeed = RampDownCounts[TURNTABLE_DAC  ] - RampDownCounts[TURNTABLE_DAC-1]
    else
        ExpectedCountsAtNextSpeed = RampDownCounts[MAX_DAC_VALUE-1] - RampDownCounts[MAX_DAC_VALUE-2]
    endif
    long_subtrahend[0] = RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed
    long_subtrahend[1] = 0
    gosub long_subtract

    ;(CounterStop - TTCounter) is the number of counts left before stopping
    ;(RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed)) is the number of counts it will
    ;take to stop if we speed up to the next DAC value or hold at max speed
    ;if ((CounterStop - TTCounter) < (RampDownCounts[TURNTABLE_DAC-1] + ExpectedCountsAtNextSpeed)) then
    if (long_result[1] & $8000) then
        do
            TURNTABLE_DAC = TURNTABLE_DAC - 1
        loop until (TURNTABLE_DAC = 1) or ((long_minuend[1] = 0) and (long_minuend[0] > RampDownCounts[TURNTABLE_DAC-1]))
    else
        if (TURNTABLE_DAC < MAX_DAC_VALUE) then
            TURNTABLE_DAC = TURNTABLE_DAC + 1
        endif
    endif
    if TURNTABLE_DAC = 1 then
        gosub wait_until_done
    endif
    return

;=============================================================================
turntable_counterclockwise:
    ; goto zero or until key is released
    position_to_goto[0] = TT_ZERO_OFFSET_LO
    position_to_goto[1] = TT_ZERO_OFFSET_HI
    goto turntable_goto_position

;=============================================================================
turntable_clockwise:
    ; goto max or until key is released
    long_addend1[0] = TT_ZERO_OFFSET_LO
    long_addend1[1] = TT_ZERO_OFFSET_HI
    long_addend2[0] = TT_MAX_POSITION_LO
    long_addend2[1] = TT_MAX_POSITION_HI
    gosub long_add
    position_to_goto[0] = long_result[0]
    position_to_goto[1] = long_result[1]
    goto turntable_goto_position

;=============================================================================
turntable_next_location:
    if (loconet_switch = $ffff) or (tt_stop = MAX_TT_STOPS - 1) then return
    tt_stop = tt_stop + 1
    gosub turntable_ee_read_stop
    if tt_ee_switch != $ffff then
        loconet_switch = tt_ee_switch
        last_switch_request = tt_ee_switch
        desired_tt_position[0] = tt_ee_position[0]
        desired_tt_position[1] = tt_ee_position[1]
    else
        tt_stop = tt_stop - 1
    endif
    return

;=============================================================================
turntable_previous_location:
    if (loconet_switch = $ffff) or (tt_stop = 0) then return
    tt_stop = tt_stop - 1
    gosub turntable_ee_read_stop
    loconet_switch = tt_ee_switch
    last_switch_request = tt_ee_switch
    desired_tt_position[0] = tt_ee_position[0]
    desired_tt_position[1] = tt_ee_position[1]
    return

;=============================================================================
handle_switch_request:
    gosub turntable_ee_look_up_loconet_switch
    if (tt_ee_switch = loconet_switch) then
        desired_tt_position[0] = tt_ee_position[0]
        desired_tt_position[1] = tt_ee_position[1]
        ; loconet_switch found in translate table
        last_switch_request = loconet_switch
        if operate_mode = MODE_PROGRAM then return
    else
        ; loconet_switch not found in translate table
        if operate_mode = MODE_OPERATE then 
            loconet_switch = last_switch_request
        else
            desired_tt_position[0] = $ffff
            desired_tt_position[1] = $ffff
        endif
        return
    endif
    position_to_goto[0] = desired_tt_position[0]
    position_to_goto[1] = desired_tt_position[1]
    goto turntable_goto_position

;=============================================================================
turntable_set_translation:
    if (loconet_switch = $ffff) or ((current_tt_loc[0] = $ffff) and (current_tt_loc[1] = $ffff)) then return
    gosub turntable_ee_look_up_loconet_switch
    if (tt_stop = MAX_TT_STOPS) then
        ; EEPROM is full
        return
    endif
    desired_tt_position[0] = current_tt_loc[0]
    desired_tt_position[1] = current_tt_loc[1]
    tt_ee_switch = loconet_switch
    tt_ee_position[0] = current_tt_loc[0]
    tt_ee_position[1] = current_tt_loc[1]
    goto turntable_ee_write_stop

;=============================================================================
turntable_initialize:
    TURNTABLE_DIR1 = 0
    TURNTABLE_DIR2 = 0
    TURNTABLE_DAC = 0

    RampDownCounts[ 0] = 10 
    RampDownCounts[ 1] = 44 
    RampDownCounts[ 2] = 108 
    RampDownCounts[ 3] = 201 
    RampDownCounts[ 4] = 326 
    RampDownCounts[ 5] = 482 
    RampDownCounts[ 6] = 670 
    RampDownCounts[ 7] = 888 
    RampDownCounts[ 8] = 1137 
    RampDownCounts[ 9] = 1419 
    RampDownCounts[10] = 1730 
    RampDownCounts[11] = 2071 
    RampDownCounts[12] = 2444 
    RampDownCounts[13] = 2848 
    RampDownCounts[14] = 3285 
    RampDownCounts[15] = 3757 
    RampDownCounts[16] = 4259 
    RampDownCounts[17] = 4793 
    RampDownCounts[18] = 5362 
    RampDownCounts[19] = 5966 
    RampDownCounts[20] = 6601 
    RampDownCounts[21] = 7270 
    RampDownCounts[22] = 7974 
    RampDownCounts[23] = 8714 
    RampDownCounts[24] = 9486 
    RampDownCounts[25] = 10297 
    RampDownCounts[26] = 11143 
    RampDownCounts[27] = 12025 
    RampDownCounts[28] = 12948 
    RampDownCounts[29] = 13906 
    RampDownCounts[30] = 14906 

    last_switch_request = $ffff
    desired_tt_position[0] = $ffff
    desired_tt_position[1] = $ffff

    gosub turntable_ee_read_current_location

    ; try to find the current location in the translation table
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch = $ffff) then 
            tt_stop = MAX_TT_STOPS
            exit
        endif
        if (tt_ee_position[0] = current_tt_loc[0]) and (tt_ee_position[1] = current_tt_loc[1]) then
            exit
        endif
    next tt_stop 
    if  (tt_stop = MAX_TT_STOPS) then
        ; current location not found in translate table
        ; use the first entry in the translate table if it exists
        tt_stop = 0
        gosub turntable_ee_read_stop
    endif
    if tt_ee_switch != $ffff then
        loconet_switch = tt_ee_switch 
        desired_tt_position[0] = tt_ee_position[0]
        desired_tt_position[1] = tt_ee_position[1]
    endif
    last_switch_request = loconet_switch
    return

;=============================================================================

