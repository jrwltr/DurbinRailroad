;=============================================================================
RXFIFO_SIZE con 16
rx_data_fifo    var byte[RXFIFO_SIZE] bank0 SYSTEM
rx_head         var byte bank0 SYSTEM
rx_tail         var byte bank0 SYSTEM

timer0_interrupt var byte bank0 SYSTEM

;=============================================================================
define INTHAND  isr

fsr0l_save      var byte bank0 SYSTEM
fsr0h_save      var byte bank0 SYSTEM

ASM
isr:
    clrf    BSR                             ; set bank to 0
    movf    FSR0L,W                         ;
    movwf   fsr0l_save                      ; fsr0l_save = fsr0l
    movf    FSR0H,W                         ;
    movwf   fsr0h_save                      ; fsr0h_save = fsr0h
isr1:                                       ;
    movlb   14                              ; set bank to 14
    btfss   PIR3,5                          ;
    bra     isr6                            ; while PIR3.RCIF = 1
    movlb   2                               ;     set bank to 2
    btfss   RC1STA, 2                       ;     if RC1STA.FERR then
    bra     isr2                            ;         framing error
    movf    RC1REG, W                       ;         W = RC1REG
    bcf     RC1STA, 7                       ;         RC1STA.7 = 0 ; SPEN = 0 reset the serial port
    bsf     RC1STA, 7                       ;         RC1STA.7 = 1 ; SPEN = 1
                                            ;         could notify the upper layer but protocol doesn't require it
    bra     isr6                            ;         break;
isr2:                                       ;
    btfss   RC1STA, 1                       ;     elseif RC1STA.OERR then
    bra     isr3                            ;         overrun error
    bcf     RC1STA, 4                       ;         RC1STA.4 = 0 ; CREN = 0 to clear error
    bsf     RC1STA, 4                       ;         RC1STA.4 = 1 ; CREN = 1
                                            ;         could notify the upper layer but protocol doesn't require it
    bra     isr6                            ;         break;
isr3:                                       ;     else
    clrf    BSR                             ;         set bank to 0
    movf    rx_tail, W                      ;         W = rx_tail
    addlw   rx_data_fifo                    ;         W = W + rx_data_fifo
    movwf   FSR0L                           ;         FSR0L = W
    clrf    FSR0H                           ;         FSR0H = 0
    movf    rx_tail, W                      ;
    addlw   1                               ;
    subwf   rx_head, W                      ;
    btfss   STATUS, 2                       ;         if rx_tail + 1 == rx_head then
    bra     isr4                            ;
                                            ;             fifo full
                                            ;             could notify the upper layer but protocol doesn't require it
    movlb   2                               ;             set bank to 2
    movf    RC1REG, W                       ;             W = RC1REG
    bra     isr1                            ;
isr4:                                       ;         else
    movf    rx_tail, W                      ;
    addlw   1                               ;
    movwf   rx_tail                         ;             rx_tail = rx_tail + 1
    sublw   _RXFIFO_SIZE                    ;
    btfss   STATUS, 2                       ;             if rx_tail == RXFIFO_SIZE
    bra     isr5                            ;
    clrw                                    ;
    movwf   rx_tail                         ;                 rx_tail = 0
isr5:                                       ;             endif
    movlb   2                               ;             set bank to 2
    movf    RC1REG, W                       ;             W = RC1REG
    clrf    BSR                             ;             set bank to 0
    movwf   INDF0                           ;             store rx data in fifo
                                            ;         endif
    bra     isr1                            ;     endif
isr6:                                       ; endwhile
    movlb   14                              ; set bank to 14
    btfss   PIR0,5                          ;
    bra     isr7                            ; if PIR0.TMR0IF = 1
    bcf     PIR0,5                          ;    PIR0.TMR0IF = 0
    clrf    BSR                             ;    set bank to 0
    movlw   1                               ;    timer0_interrupt = 1
    movwf   timer0_interrupt                ;
isr7:                                       ; endif
    clrf    BSR                             ; set bank to 0
    movf    fsr0l_save,  W                  ; fsr0l = fsr0L_save
    movwf   FSR0L                           ;
    movf    fsr0h_save,  W                  ; fsr0h = fsr0H_save
    movwf   FSR0H                           ;
    clrf    BSR                             ; set bank to 0
    retfie
ENDASM

;=============================================================================
interrupt_initialize:
    ; initialize serial receive interrupts
    PIR3.4 = 0      ; PIR3.TXIF = 0  clear serial port transmit interrupt flag
    RC1STA.7 = 1    ; SPEN = 1       enable serial port
    PIE1.5 = 1      ; RCIE = 1       enable receive interrupt
    RC1STA.4 = 1    ; CREN = 1       enable the serial port receiver

    ; initialize timer 0 interrupts
    TMR0H = $ff     ; timer 0 8 bit comparator value
    TMR0L = 0       ; timer 0 counter starts at zero
    T0CON1 = $68    ; T0CON1.TOCS<2:0> = HFINTOSC, T0CON1.T0ASYNC = 0, T0CON1.T0CKPS<3:0> = 8 (1:256 prescaler)
    PIR0.5 = 0      ; PIR0.TMR0IF = 0  clear timer 0 interrupt flag
    PIE0.5 = 1      ; PIE0.TMR0IE = 1  enable timer 0 interrupt
    T0CON0 = $80    ; T0CON0.T0EN = 1  enable timer 0

    INTCON.6 = 1    ; PEIE = 1       enable peripheral interrupt

    ; global interrupt enable = 1
    INTCON.7 = 1
    return

;=============================================================================

