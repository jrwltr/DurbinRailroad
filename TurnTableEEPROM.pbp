;=============================================================================
current_tt_loc      var word[2] ; the current turntable position
tt_180              var word[2] ; number of counts in 180 degrees
tt_stop             var word    ; the ordinal value of a preprogrammed turntable position
tt_180_switch       var word    ; the loconet switch that requests 180 degree turn


tt_ee_switch        var word    ; the Loconet switch read from EEPROM
tt_ee_position      var word[2] ; the turntable postion read from EEPROM

MAX_TT_STOPS        con 40

;=============================================================================
TT_ZERO_OFFSET_HI  con $0
TT_ZERO_OFFSET_LO  con $800
    ; TT_ZERO_OFFSET_HI:TT_ZERO_OFFSET_LO is a 32 bit value which is added to
    ; every turntable position.  When you go to position 0, you're really going
    ; to this offset.  This allows the use of -1 ($ffffffff) as a marker for
    ; for an undefined position

;=============================================================================
CURRENT_LOCATION_EEPROM_ADDRESS con 0
    ; the address in EEPROM where the current turntable position is stored
TRANSLATE_TABLE_EEPROM_ADDRESS  con 4 
    ; the address in EEPROM where the turntable translate table is stored
    ; each translate table entry is 6 bytes
    ;    the first two bytes contain the Loconet switch number
    ;    the next four bytes contain the turntable position
_180_LOCATION_EEPROM_ADDRESS    con 6004
_180_SWITCH_EEPROM_ADDRESS      con 6008

;=============================================================================
; turntable_ee_save_current_location: save the current turntable position to eeprom
;   input: current_tt_loc
;
turntable_ee_save_current_location:
    ee_long[0] = current_tt_loc[0]
    ee_long[1] = current_tt_loc[1]
    ee_address = CURRENT_LOCATION_EEPROM_ADDRESS
    goto eeprom_write_long

;=============================================================================
; turntable_ee_read_current_location: read the current turntable position from eeprom,
;       this is used to remember determine the position at power up
;   output: current_tt_loc
;
turntable_ee_read_current_location:
    ee_address = CURRENT_LOCATION_EEPROM_ADDRESS
    gosub eeprom_read_long
    current_tt_loc[0] = ee_long[0]
    current_tt_loc[1] = ee_long[1]
    return

;=============================================================================
; turntable_ee_save_180: save the number of counts in 180 degrees to eeprom
;   input: tt_180
;
turntable_ee_save_180:
    ee_long[0] = tt_180[0]
    ee_long[1] = tt_180[1]
    ee_address = _180_LOCATION_EEPROM_ADDRESS
    goto eeprom_write_long

;=============================================================================
; turntable_ee_read_180: read the number of counts in 180 degrees from eeprom,
;   output: tt_180
;
turntable_ee_read_180:
    ee_address = _180_LOCATION_EEPROM_ADDRESS
    gosub eeprom_read_long
    if (ee_long[0] != $ffff) or (ee_long[1] != $ffff) then
        tt_180[0] = ee_long[0]
        tt_180[1] = ee_long[1]
    endif
    return

;=============================================================================
; turntable_ee_save_switch_180: write the switch number assigned to 180 degree movement
;   input: tt_180_switch
;
turntable_ee_save_switch_180:
    ee_word = tt_180_switch
    ee_address = _180_SWITCH_EEPROM_ADDRESS
    goto eeprom_write_word

;=============================================================================
; turntable_ee_read_switch_180: read the switch number assigned to 180 degree movement
;   output: tt_180_switch
;
turntable_ee_read_switch_180:
    ee_address = _180_SWITCH_EEPROM_ADDRESS
    goto eeprom_read_word
    tt_180_switch = ee_word
    return
    
;=============================================================================
; turntable_ee_read_stop: read a preprogrammed stop from EEPROM
;   input:  tt_stop
;   output: tt_ee_switch
;           tt_ee_position
;
turntable_ee_read_stop:
    ee_address = TRANSLATE_TABLE_EEPROM_ADDRESS + (tt_stop * 6)
    gosub eeprom_read_word
    tt_ee_switch = ee_word
    ee_address = ee_address + 2
    gosub eeprom_read_long
    tt_ee_position[0] = ee_long[0]
    tt_ee_position[1] = ee_long[1]
    return

;=============================================================================
; turntable_ee_write_stop: write a preprogrammed stop from EEPROM
;   input:  tt_stop
;           tt_ee_switch
;           tt_ee_position
turntable_ee_write_stop:
    ee_word = tt_ee_switch
    ee_address = TRANSLATE_TABLE_EEPROM_ADDRESS + (tt_stop * 6)
    gosub eeprom_write_word
    ee_long[0] = tt_ee_position[0]
    ee_long[1] = tt_ee_position[1]
    ee_address = ee_address + 2
    goto eeprom_write_long

;=============================================================================
; turntable_ee_look_up_loconet_switch: find a preprogrammed stop in EEPROM
;   input:  loconet_switch
;   output: tt_ee_switch
;           tt_ee_position
;
turntable_ee_look_up_loconet_switch:
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch = $ffff) or (tt_ee_switch = loconet_switch) then exit
    next tt_stop
    return

;=============================================================================

