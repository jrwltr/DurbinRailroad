;=============================================================================
current_tt_loc      var word[2] ; the current turntable position
desired_tt_loc      var word[2] ; the turntable position corresponding 
                                ; to a preprogrammed turntable stop
tt_180              var word[2] ; number of counts in 180 degrees
tt_stop             var word    ; the ordinal value of a preprogrammed turntable position

tt_ee_switch        var word    ; the Loconet switch read from EEPROM
tt_ee_position      var word[2] ; the turntable postion read from EEPROM

MAX_TT_STOPS        con 40

;=============================================================================
TT_ZERO_OFFSET_HI  con $0
TT_ZERO_OFFSET_LO  con $800
    ; TT_ZERO_OFFSET_HI:TT_ZERO_OFFSET_LO is a 32 bit value which is added to
    ; every turntable position.  When you go to position 0, you're really going
    ; to this offset.  This allows the use of -1 ($ffffffff) as a marker for
    ; for an undefined position

TT_180_SW_MARKER_HI con $0
TT_180_SW_MARKER_LO con $980    ; 180 + TT_ZERO_OFFSET_LO
    ; TT_180_SW_MARKER_HI:TT_180_SW_MARKER_LO is a 32 bit value used to mark
    ; the Loconet 180 switch

;=============================================================================
CURRENT_LOCATION_EEPROM_ADDRESS con 0
    ; the address in EEPROM where the current turntable position is stored
_180_LOCATION_EEPROM_ADDRESS    con 4
    ; the address in EEPROM where the 180 degree calibration value is stored
TRANSLATE_TABLE_EEPROM_ADDRESS  con 8 
    ; the address in EEPROM where the turntable translate table is stored
    ; each translate table entry is 6 bytes
    ;    the first two bytes contain the Loconet switch number
    ;    the next four bytes contain the turntable position

;=============================================================================
; turntable_ee_save_current_location: save the current turntable position to eeprom
;   input: current_tt_loc
;
turntable_ee_save_current_location:
    ee_long[0] = current_tt_loc[0]
    ee_long[1] = current_tt_loc[1]
    ee_address = CURRENT_LOCATION_EEPROM_ADDRESS
    goto eeprom_write_long

;=============================================================================
; turntable_ee_read_current_location: read the current turntable position from eeprom,
;       this is used to remember determine the position at power up
;   output: current_tt_loc
;
turntable_ee_read_current_location:
    ee_address = CURRENT_LOCATION_EEPROM_ADDRESS
    gosub eeprom_read_long
    current_tt_loc[0] = ee_long[0]
    current_tt_loc[1] = ee_long[1]
    return

;=============================================================================
; turntable_ee_save_180: save the number of counts in 180 degrees to eeprom
;   input: tt_180
;
turntable_ee_save_180:
    ee_long[0] = tt_180[0]
    ee_long[1] = tt_180[1]
    ee_address = _180_LOCATION_EEPROM_ADDRESS
    goto eeprom_write_long

;=============================================================================
; turntable_ee_read_180: read the number of counts in 180 degrees from eeprom,
;   output: tt_180
;
turntable_ee_read_180:
    ee_address = _180_LOCATION_EEPROM_ADDRESS
    gosub eeprom_read_long
    tt_180[0] = ee_long[0]
    tt_180[1] = ee_long[1]
    return

;=============================================================================
; turntable_ee_read_stop: read a preprogrammed stop from EEPROM
;   input:  tt_stop
;   output: tt_ee_switch
;           tt_ee_position
;
turntable_ee_read_stop:
    ee_address = TRANSLATE_TABLE_EEPROM_ADDRESS + (tt_stop * 6)
    gosub eeprom_read_word
    tt_ee_switch = ee_word
    ee_address = ee_address + 2
    gosub eeprom_read_long
    tt_ee_position[0] = ee_long[0]
    tt_ee_position[1] = ee_long[1]
    return

;=============================================================================
; turntable_ee_write_stop: write a preprogrammed stop from EEPROM
;   input:  tt_stop
;           tt_ee_switch
;           tt_ee_position
turntable_ee_write_stop:
    ee_word = tt_ee_switch
    ee_address = TRANSLATE_TABLE_EEPROM_ADDRESS + (tt_stop * 6)
    gosub eeprom_write_word
    ee_long[0] = tt_ee_position[0]
    ee_long[1] = tt_ee_position[1]
    ee_address = ee_address + 2
    goto eeprom_write_long

;=============================================================================
; turntable_ee_set_translation: save a preprogrammed stop in EEPROM
;   input:  currrent_tt_loc is the current turntable position
;           loconet_switch the loconet switch number that identifies the stop
;
tt_insert   var byte
turntable_ee_set_translation:
    if (loconet_switch = $ffff) or ((current_tt_loc[0] = $ffff) and (current_tt_loc[1] = $ffff)) then return
    ; see if an existing preprogrammed stop exists corresponding to loconet_switch
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch >= loconet_switch) then exit
    next tt_stop
    if (tt_stop = MAX_TT_STOPS) then
        ; EEPROM is full
        return
    endif
    desired_tt_loc[0] = current_tt_loc[0]
    desired_tt_loc[1] = current_tt_loc[1]
    if (tt_ee_switch = $ffff) or (tt_ee_switch = loconet_switch) then
        ; adding to end of the list or updating an existing entry
    else
        ; adding a new entry in the middle of the list
        tt_insert = tt_stop
        ; find the end of the list
        for tt_stop = tt_stop + 1 to MAX_TT_STOPS-1
            gosub turntable_ee_read_stop
            if (tt_ee_switch = $ffff) then exit
        next tt_stop
        if tt_stop = MAX_TT_STOPS then
            ; EEPROM is full
            return
        endif
        ; shift the list entries up to make room for the new one
        for tt_stop = tt_stop to tt_insert + 1 step -1
            tt_stop = tt_stop - 1
            gosub turntable_ee_read_stop
            tt_stop = tt_stop + 1
            gosub turntable_ee_write_stop
        next tt_stop
    endif
    tt_ee_switch = loconet_switch
    tt_ee_position[0] = current_tt_loc[0]
    tt_ee_position[1] = current_tt_loc[1]
    goto turntable_ee_write_stop

;=============================================================================
; turntable_ee_delete_stop: delete a preprogrammed stop from EEPROM
;   input:  loconet_switch
turntable_ee_delete_stop:
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch = loconet_switch) then 
            ; switch found
            exit
        endif
        if (tt_ee_switch = $ffff) then
            ; switch not found, nothing to do
            return
        endif
    next tt_stop
    if (tt_stop = MAX_TT_STOPS) then
        ; switch not found, nothing to do
        return
    endif
    if (tt_stop < MAX_TT_STOPS - 1) then
        for tt_stop = (tt_stop + 1) to (MAX_TT_STOPS - 1)
            gosub turntable_ee_read_stop
            if (tt_ee_switch = $ffff) then exit
            tt_stop = tt_stop - 1
            gosub turntable_ee_write_stop
            tt_stop = tt_stop + 1
        next tt_stop
        tt_stop = tt_stop - 1
    endif
    tt_ee_switch = $ffff
    tt_ee_position[0] = $ffff
    tt_ee_position[1] = $ffff
    goto turntable_ee_write_stop

;=============================================================================
; turntable_ee_look_up_loconet_switch: find a preprogrammed stop in EEPROM
;   input:  loconet_switch
;   output: tt_ee_switch
;           tt_ee_position
;
turntable_ee_look_up_loconet_switch:
    for tt_stop = 0 to MAX_TT_STOPS - 1
        gosub turntable_ee_read_stop
        if (tt_ee_switch = $ffff) or (tt_ee_switch = loconet_switch) then exit
    next tt_stop
    return

;=============================================================================
turntable_erase_eeprom:
    ee_address = CURRENT_LOCATION_EEPROM_ADDRESS
    ee_long[0] = $ffff
    ee_long[1] = $ffff
    gosub eeprom_write_long
    ee_address = _180_LOCATION_EEPROM_ADDRESS
    gosub eeprom_write_long
    ee_address = TRANSLATE_TABLE_EEPROM_ADDRESS
    for tt_stop = 0 to MAX_TT_STOPS - 1
        tt_ee_switch = $ffff
        tt_ee_position[0] = $ffff
        tt_ee_position[1] = $ffff
        gosub turntable_ee_write_stop
    next tt_stop
    return

;=============================================================================

