;=============================================================================
; This module provides functions to read and write EEPROM.  This supports
; eeprom access to either the PIC internal EEPROM or an external
; 24CW128X but not both (see the conditional compilation below).
; 
;=============================================================================

ee_address      var word
ee_byte         var byte
ee_word         var word

;=============================================================================
; eeprom_read_byte:
;   input:  ee_address - the eeprom address from which to read
;   output: ee_byte - the byte value read from eeprom
;
eeprom_read_byte:
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0 ], eeprom_i2c_error
    I2CREAD EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_byte ], eeprom_i2c_error
    return

;=============================================================================
; eeprom_write_byte:
;   input:  ee_address - the eeprom address to which to write
;           ee_byte - the byte value to be written to eeprom
;
eeprom_write_byte:
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0, ee_byte ], eeprom_i2c_error
    pause 10
    return

;=============================================================================
; eeprom_read_word:
;   input:  ee_address - the eeprom address from which to read
;           ee_word - the word value read from eeprom
;
eeprom_read_word:
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0 ], eeprom_i2c_error
    I2CREAD  EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_word.byte1, ee_word.byte0 ], eeprom_i2c_error
    return

;=============================================================================
; eeprom_write_word:
;   input:  ee_address - the eeprom address to which to write
;           ee_word - the word value to be written to eeprom
;
eeprom_write_word:
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0, ee_word.byte1, ee_word.byte0 ], eeprom_i2c_error
    pause 10
    return

#ifdef DO_LONG_EEPROM_FUNCTIONS

ee_long     var word[2]
ee_long1    var word
ee_long0    var word

;=============================================================================
; eeprom_read_long:
;   input:  ee_address - the eeprom address from which to read
;           ee_long - the long value read from eeprom
;
eeprom_read_long:
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0 ], eeprom_i2c_error
    I2CREAD EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_long0.byte1, ee_long0.byte0, ee_long1.byte1, ee_long1.byte0 ], eeprom_i2c_error
    ee_long[0] = ee_long0
    ee_long[1] = ee_long1
    return

;=============================================================================
; eeprom_write_long:
;   input:  ee_address - the eeprom address to which to write
;           ee_long - the long value to be written to eeprom
;

eeprom_write_long:
    ee_long0 = ee_long[0]
    ee_long1 = ee_long[1]
    I2CWRITE EEPROM_I2C_DATA, EEPROM_I2C_CLK, EEPROM_I2C_ADDRESS, [ ee_address.byte1, ee_address.byte0, ee_long0.byte1, ee_long0.byte0, ee_long1.byte1, ee_long1.byte0 ], eeprom_i2c_error
    pause 10
    return

#endif

;=============================================================================
eeprom_i2c_error:
#if DO_DISPLAY
    DisplayRow = 1
    DisplayCol = 0
    gosub display_set_cursor
    ARRAYWRITE DisplayString, ["EEPROM Error", 0]
    gosub display_write_string
    gosub display_clear_to_end_of_line
    pause 2000
#endif
    return

;=============================================================================
