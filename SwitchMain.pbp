;=============================================================================
#define DO_SWITCHMOTOR
#define DO_LOCONET
#define DO_DISPLAY
#define DO_OPERATE_PROGRAM
#define DO_ONBOARD_SWITCHES
#define DO_EEPROM
#define DO_SWITCH_CONTROLLER
#define DO_RS485

;#define DEBUG_485_PACKETS

;=============================================================================

CLEAR       ; zero all variables

INCLUDE "ProcessorConfiguration.pbp"

goto init   ; skip over interrupt service routine, functions, other included code

INCLUDE "Interrupt.pbp"

;=============================================================================
operate_mode        var byte
    MODE_OPERATE    con 0
    MODE_PROGRAM    con 1
    MODE_ROUTE_EDIT con 2

;=============================================================================
switch_not_defined  var bit[1]

display_update_needed   var bit

;=============================================================================
#ifdef DO_LED
INCLUDE "LED.pbp"
#endif
INCLUDE "LCD4X20.pbp"
INCLUDE "EEPROM.pbp"
INCLUDE "OnboardSwitches.pbp"
INCLUDE "LOCONET.inc"
INCLUDE "SwitchMotor.inc"
INCLUDE "LOCONET.pbp"
#ifdef DO_RS485
INCLUDE "RS485.pbp"
#endif
INCLUDE "SwitchMotorEEPROM.pbp"
INCLUDE "SwitchMotor.pbp"
INCLUDE "SwitchRoutes.pbp"

;=============================================================================
update_display:
    DisplayRow = 0
    DisplayCol = 0
    gosub display_set_cursor

    if operate_mode != MODE_ROUTE_EDIT then
        if loconet_switch != $ffff then
            ARRAYWRITE DisplayString, [dec loconet_switch+1, 0]
        else
            ARRAYWRITE DisplayString, ["???", 0]
        endif
        gosub display_write_string

        if route_number == ROUTE_NOT_FOUND then
            if operate_mode = MODE_OPERATE then
                if switch_not_defined then
                    ARRAYWRITE DisplayString, ["=?", 0]
                else
                    gosub switch_eeprom_read_switch_state
                    if switch_motor_state = SWITCH_MOTOR_THROWN then
                        ARRAYWRITE DisplayString, ["=T", 0]
                    else
                        ARRAYWRITE DisplayString, ["=C", 0]
                    endif
                endif
                gosub display_write_string
            elseif operate_mode = MODE_PROGRAM then
                if switch_not_defined then
                    ; no translation found
                    ARRAYWRITE DisplayString, [">???", 0]
                else
                    ARRAYWRITE DisplayString, [ ">", dec switch_address, ".", dec switch_bank, ".", dec switch_motor, 0]
                endif
                gosub display_write_string
            endif
        else
            ARRAYWRITE DisplayString, [">ROUTE", 0]
            gosub display_write_string
        endif
        gosub display_clear_to_end_of_line

        DisplayRow = 1
        DisplayCol = 0
        gosub display_set_cursor
        if operate_mode = MODE_PROGRAM then
            ARRAYWRITE DisplayString, ["DEL RTE    ERASE", 0]
            gosub display_write_string
        endif
        gosub display_clear_to_end_of_line
    else
        ; route edit mode
        if route_num_switches = 0 then
            ARRAYWRITE DisplayString, ["???=?", 0]
        else
            ARRAYWRITE DisplayString, [dec ((route_switches[route_switch_index] & $7fff)+1), 0]
            gosub display_write_string
            if route_switches[route_switch_index] & $8000 then
                ARRAYWRITE DisplayString, ["=T", 0]
            else
                ARRAYWRITE DisplayString, ["=C", 0]
            endif
        endif
        gosub display_write_string
        gosub display_clear_to_end_of_line
        DisplayRow = 1
        DisplayCol = 0
        gosub display_set_cursor
        ARRAYWRITE DisplayString, ["UP  DWN YES NO", 0]
        gosub display_write_string
        gosub display_clear_to_end_of_line
    endif

    goto display_operate_program

;=============================================================================
operate_program_flash:
    DisplayCol = 1
    DisplayCol = DISPLAY_COLUMNS-1
    gosub display_set_cursor
    ARRAYWRITE DisplayString, [" ", 0]
    goto display_write_string
    pause 400
display_operate_program:
    DisplayRow = 0
    DisplayCol = DISPLAY_COLUMNS-1
    gosub display_set_cursor
    if operate_mode = MODE_OPERATE then
        ARRAYWRITE DisplayString, ["O", 0]
    elseif operate_mode = MODE_PROGRAM then
        ARRAYWRITE DisplayString, ["P", 0]
    elseif operate_mode = MODE_ROUTE_EDIT then
        ARRAYWRITE DisplayString, ["R", 0]
    endif
    goto display_write_string

;=============================================================================
; operate_switch_on is called when the program/operate switch is switched
; to the operate position
;
operate_switch_on:
    if operate_mode != MODE_OPERATE then 
        if operate_mode = MODE_ROUTE_EDIT then
            gosub route_cancel
        endif
        operate_mode = MODE_OPERATE
    endif
    return

; operate_switch_off is called when the program/operate switch is switched
; to the program position
;
operate_switch_off:
    if operate_mode = MODE_OPERATE then 
        operate_mode = MODE_PROGRAM
    endif
    return

;=============================================================================
; button_X_pressed is called when an onboard button is pressed
;
button_1_pressed:
    if operate_mode = MODE_PROGRAM then
        goto program_delete_key
    elseif operate_mode = MODE_ROUTE_EDIT then
        goto route_up_key
    endif
    return

; button_2_pressed is called when the onboard PB2 button is pressed
button_2_pressed:
    if operate_mode = MODE_PROGRAM then
        goto program_route_key
    elseif operate_mode = MODE_ROUTE_EDIT then
        goto route_down_key
    endif
    return

; button_3_pressed is called when the onboard PB3 button is pressed
button_3_pressed:
    if operate_mode = MODE_ROUTE_EDIT then
        goto route_enter_key
    endif
    return

; button_4_pressed is called when the onboard PB4 button is pressed
button_4_pressed:
    if operate_mode = MODE_ROUTE_EDIT then
        goto route_no_key
#ifdef DO_RS485
#ifdef DEBUG_485_PACKETS
    else
        gosub rs485_display_stats
        gosub button_cancel_repeat
        display_update_needed = 0
#endif
#endif
    endif
    return

;=============================================================================
; button_X_repeat is called when an onboard PBX button is pressed and 
; held until the repeat timer expires.
;
button_4_repeat:
    if operate_mode = MODE_ROUTE_EDIT then
        gosub route_no_key_repeat
    elseif operate_mode = MODE_PROGRAM then
        gosub switch_eeprom_erase
    endif
button_1_repeat:
button_2_repeat:
button_3_repeat:
    goto button_cancel_repeat

;=============================================================================
; button_X_released is called when an onboard PBX button is released
;
button_1_released:
button_2_released:
button_3_released:
button_4_released:
    return

;=============================================================================
program_delete_key:
    if loconet_switch = $ffff then return
    if route_number != ROUTE_NOT_FOUND then
        route_number = loconet_switch
        gosub route_eeprom_delete
    else
        if (switch_not_defined) then return
        gosub switch_eeprom_delete_translation 
    endif
    return

program_route_key:
    if (loconet_switch = $ffff) then return
    if (!switch_not_defined) then
        gosub switch_eeprom_delete_translation 
    endif
    operate_mode = MODE_ROUTE_EDIT
    route_number = loconet_switch
    goto route_eeprom_read

;=============================================================================
route_up_key:
    goto route_previous_switch

route_down_key:
    goto route_next_switch

route_enter_key:
    operate_mode = MODE_PROGRAM
    goto route_eeprom_save

route_no_key:
    goto route_delete_switch

route_no_key_repeat:
    operate_mode = MODE_PROGRAM
    goto route_cancel

;=============================================================================
init:
gosub display_initialize
#ifdef DO_LED
gosub led_initialize
#endif
gosub loconet_initialize 
#ifdef DO_RS485
gosub rs485_initialize
#endif
gosub switch_motor_initialize

;=============================================================================

INCLUDE "Mainloop.pbp"

;=============================================================================

    End



